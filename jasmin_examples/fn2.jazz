/* The Jasmin language has a C-like syntax, but inherits a lot of constraints
   from the assembly level. Thus, some simple and seemingly correct programs
   are rejected by the compiler, which can be confusing for beginners.
*/

/* The result must be in a register. It is not even syntactically valid to put
   a value after "return".
*/
export fn f1 () -> reg u64 {
  return 0; // unexpected token
}

/* The calling conventions on x86 state that the first argument is passed in
   register RDI, and the result should be in register RAX. The compiler does
   not introduce copies between registers on its own. The user has to do
   them explicitly.
*/
export fn f2 (reg u64 x) -> reg u64 {
  return x;
  // register allocation: cannot allocate x.182 into RAX.68,
  // the variable is already allocated in RDI.61

}

/* The correct version is this one. */
export fn f2_2 (reg u64 x) -> reg u64 {
  reg u64 y;
  y = x;
  return y;
}

/* This can also be written this way, but this is less readble. */
export fn f2_3 (reg u64 x) -> reg u64 {
  x = x;
  return x;
}

/* Currently, the Jasmin compiler accepts only registers as arguments to
   functions. And the calling conventions on x86 specify the maximal number
   of registers that can be used as arguments, 6. In a near future,
   arguments passed on the stack should be allowed too.
*/
export fn f3 (reg u64 x y z a b c d e) -> reg u64 {
  // register allocation: too many parameters according to the ABI
  // (only 6 available on this architecture)
  reg u64 r;
  r = x;
  return r;
}
