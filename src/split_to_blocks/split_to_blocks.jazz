/// This function takes a string, an ID, and a length as input and shrinks the string to a block of 16 bytes.
/// The resulting block is stored in the memory pointed to by `ptrout`.
/// 
/// # Arguments
/// 
/// * `ptrin` - A pointer to the input string.
/// * `ptrout` - A pointer to the output block of 16 bytes.
/// * `length` - The length of the input string in bytes
/// * `id` - The ID of the block to extract the string.
inline fn get_block(reg u64 ptrin, reg u64 ptrout, reg u32 length, reg u32 id) {
	ptrin = ptrin;
	ptrout = ptrout;
	length = length;
	id = id;

	// compute address of last byte
	// last_byte_addr = ptrin + length - 1
	reg u64 last_byte_addr;
	last_byte_addr = (64u)length;
	last_byte_addr += ptrin;
	
	reg u32 modu;
	modu = 16;
	reg u32 total;
	total = length;
	total %= modu;
	reg u64 calc;
	if (total == 0) { // length multiple of 16 (last block is full)
		calc = (64u)id;
		calc += 1;
		calc *= 16;
		last_byte_addr -= calc;
		reg u128[1] m;
		m[0] = (u128)[last_byte_addr];
		(u128)[ptrout] = m[0];
	} else { // last block not full
		reg u64 nb_blocks;
		nb_blocks = (64u)length;
		reg u64 sixteen;
		sixteen = 16;
		nb_blocks /= sixteen;
		if(id != nb_blocks) {
			// we want a block that is not the last block
			calc = (64u)id;
			calc += 1;
			calc *= 16;
			last_byte_addr -= calc;
			reg u128[1] m;
			m[0] = (u128)[last_byte_addr];
			(u128)[ptrout] = m[0];
		}else{
			// we want the last block
			reg u32 missing_bytes_last_block temp2;
			temp2 = length;
			missing_bytes_last_block = nb_blocks;
			missing_bytes_last_block *= 16;
			temp2 -= missing_bytes_last_block;
			
			inline int i;
			for i = 0 to 16 {
				reg u32 i_u32;
				i_u32 = i;
				if i_u32 < temp2 {
					reg u64 temp;
					temp = ptrin;
					temp += (64u)i;
					(u8)[ptrout] = (u8)[temp];
				}else{
					(u8)[ptrout] = 0;
				}
				ptrout += 1;
			}
		}
	}	
}


export fn get_block_exp(reg u64 ptrin, reg u64 ptrout, reg u32 length, reg u32 id) {
	ptrin = ptrin;
	ptrout = ptrout;
	length = length;
	id = id;
	
	get_block(ptrin, ptrout, length, id);
}
