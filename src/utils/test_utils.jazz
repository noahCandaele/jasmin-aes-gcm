export fn jasmin_u32(reg u64 ptr_byte_array) {
	reg u32 res;
	res = 0x01234567;
	(u32)[ptr_byte_array] = res;
}

export fn jasmin_u64(reg u64 ptr_byte_array) {
	reg u64 res;
	res = 0x0123456789abcdef;
	(u64)[ptr_byte_array] = res;
}

export fn jasmin_u128(reg u64 ptr_byte_array) {
	reg u128 res;

	reg u64 val;
	val = 0x0123456789abcdef;
	res = #VPINSR_2u64(res, val, 0);
	val = 0x0102030405060708;
	res = #VPINSR_2u64(res, val, 1);

	(u128)[ptr_byte_array] = res;
}

export fn jasmin_in_u32(reg u64 ptr_byte_array) -> reg u32 {
	reg u32 bytes;
	bytes = (u32)[ptr_byte_array];

	return bytes;
}

export fn jasmin_in_out_u32(reg u64 ptr_bytes_in, reg u64 ptr_bytes_out) {
	reg u32 bytes;
	bytes = (u32)[ptr_bytes_in];

	(u32)[ptr_bytes_out] = bytes;
}

export fn int8_sens(reg u64 ptr_byte_array, reg u64 index) -> reg u8{
	reg u8 res;
	res = (u8)[ptr_byte_array + index];
	return res;
}

export fn srink(reg u64 ptr_byte_array, reg u64 shrinked, reg u64 shrinked2) {
	reg u128 result;
	result = (128u)[ptr_byte_array];
	reg u32 shr;
	shr = #VPEXTR_32(result, 0);
	(u32)[shrinked] = shr;

	(u32)[shrinked2] = (u32)[ptr_byte_array];
}
