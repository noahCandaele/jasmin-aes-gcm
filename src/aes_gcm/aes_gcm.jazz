require "aes_gcm.jinc"

// For testing purposes
export fn compute_hash_key_jazz(reg u64 ptr_key, reg u64 ptrout_hash_key) {
	reg u128 key; key = (u128)[ptr_key];
	
	reg u128 hash_key; hash_key = compute_hash_key(key);

	(u128)[ptrout_hash_key] = hash_key;
}

// For testing purposes
export fn compute_length_str_jazz(reg u64 length_auth_data, reg u64 length_plain, reg u64 ptrout_length_str) {
	length_auth_data = length_auth_data;
	length_plain = length_plain;
	
	reg u128 length_str; length_str = compute_length_str(length_auth_data, length_plain);

	(u128)[ptrout_length_str] = length_str;
}

// For testing purposes
export fn compute_enciphered_iv_jazz(reg u64 ptr_key, reg u64 ptr_iv, reg u64 ptrout_enc_iv) {
	reg u128 key; key = (u128)[ptr_key];
	reg u128 iv; iv = (u128)[ptr_iv];
	
	reg u128 enc_iv; enc_iv = compute_enciphered_iv(key, iv);

	(u128)[ptrout_enc_iv] = enc_iv;
}

// Test
export fn ghash_series_jazz(reg u64 ptr_data, reg u64 length, reg u64 ptr_hash_key, reg u64 ptrout_result, reg u64 ptr_prev_ghash) {
	reg u128 hash_key; hash_key = (u128)[ptr_hash_key];
	reg u128 prev_ghash; prev_ghash = (u128)[ptr_prev_ghash];

	// reg u128 hash_key; hash_key = compute_hash_key(key);

	// reg u128 prev_ghash; prev_ghash = #set0_128();
	reg u128 res; res = ghash_series(prev_ghash, ptr_data, length, hash_key);

	(u128)[ptrout_result] = res;
}

// export fn aes_gcm_jazz(reg u64 ptr_key, reg u64 ptr_iv, reg u64 ptr_auth_data, reg u64 length_auth_data, reg u64 ptr_plain, reg u64 length_plain, reg u64 ptrout_auth_tag, reg u64 ptrout_cipher) {
// 	reg u128 key; key = (u128)[ptr_key];
// 	reg u128 iv; iv = (u128)[ptr_iv];
// 	ptr_auth_data = ptr_auth_data;
// 	length_auth_data = length_auth_data;
// 	ptr_plain = ptr_plain;
// 	length_plain = length_plain;
// 	ptrout_auth_tag = ptrout_auth_tag;
// 	ptrout_cipher = ptrout_cipher;

// 	aes_gcm(key, iv, ptr_auth_data, length_auth_data, ptr_plain, length_plain, ptrout_auth_tag, ptrout_cipher);
// }
