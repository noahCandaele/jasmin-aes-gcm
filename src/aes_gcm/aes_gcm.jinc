require "../ghash/ghash.jinc"
require "../aes/aes.jinc"
require "../aes_counter/aes_counter.jinc"
require "../split_to_blocks/split_to_blocks.jinc"

u64 NB_BYTES_FULL_BLOCK = 16;

// Hash Key: encipher the zero 128-bit string
inline fn compute_hash_key(reg u128 key) -> reg u128 {
	reg u128 var; var = #set0_128();
	var = aes(key, var);
	return var;
}

// Enciphered IV: encipher the IV (with counter 0) using AES
inline fn compute_enciphered_iv(reg u128 key, reg u128 iv) -> reg u128 {
	// // Set counter part to 0
	// reg u64 temp;
	// temp = #VPEXTR_64(iv, 1);
	// temp <<= 32;
	// temp >>= 32;
	// iv = #VPINSR_2u64(iv, temp, 1);

	// Encipher the IV
	reg u128 enc_iv; enc_iv = aes(key, iv);
	return enc_iv;
}

// Computes the length string, which has a size of 1 block (128 bits).
// We will use the length string to compute the authentication tag.
// The 64 first bits are the length of the authentication data in bits.
// The 64 last bits are the length of the plain in bits.
// The inputs are in bytes.
inline fn compute_length_str(reg u64 length_auth_data, reg u64 length_plain) -> reg u128 {
	reg u128 length_str; length_str = #set0_128();
	reg u64 temp; temp = length_auth_data;
	temp *= 8;
	temp = #BSWAP_64(temp);
	length_str = (128u)temp;
	temp = length_plain;
	temp *= 8;
	temp = #BSWAP_64(temp);
	length_str = #VPINSR_2u64(length_str, temp, 1);
	return length_str;
}

inline fn swap_bytes(reg u128 x) -> reg u128 {
	global u128 swap; swap = (16u8)[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
	x = #VPSHUFB_128(x, swap);
	return x;
}

fn ghash_series(reg u128 prev_ghash, reg u64 ptr_data, reg u64 length, reg u128 hash_key) -> reg u128 {
	reg u64 len16;
	len16 = length;
	len16 &= ((-1) << 4);
	reg u64 max;
	max = ptr_data;
	max += len16;

	reg u128 block;
	reg u128 mask higher_mask lower_mask;
	mask = AND_MASK[u128 0];
	higher_mask = HIGHER_MASK_INV[u128 0];
	lower_mask = LOWER_MASK_INV[u128 0];
	while (ptr_data < max) {
		block = (u128)[ptr_data];

		block = swap_bytes(block);

		
		prev_ghash = ghash_xor_bis(prev_ghash, block, hash_key, mask, higher_mask, lower_mask);

		ptr_data += 16;
	}

	if (length > len16) { // last block not full
		reg u64 nb_blocks;
		nb_blocks = length;
		nb_blocks >>= 4;

		reg u128 block;
		stack u128[1] s_data;
		reg u64 i; i = 0;
		reg u64 last_byte;
		last_byte = length;
		last_byte -= len16;
		reg u64 n; n = 16; n -= last_byte;
		reg u128 zero; zero = #set0_128();
		s_data[0] = zero;

		while (i < last_byte) {
			s_data[u8 i] = (u8)[ptr_data];
			
			i += 1;
			ptr_data += 1;
		}
		block = s_data[0];

		block = swap_bytes(block);
		prev_ghash = ghash_xor_bis(prev_ghash, block, hash_key, mask, higher_mask, lower_mask);
	}
	
	return prev_ghash;
}

// ptr_args: u128 key iv, u64 ptr_auth_data ptr_plain, u128 auth_tag, u64 ptr_cipher
export fn aes_gcm(#public reg u64 ptr_args, #public reg u64 length_auth_data, #public reg u64 length_plain) {
	reg u64 ptr_values; ptr_values = ptr_args;

	// ********  CIPHER LOOP ********
	reg u64 ptr_key; #declassify ptr_key = (u64)[ptr_values];
	reg u128 key; key = (u128)[ptr_key];
	reg u64 ptr_iv; #declassify ptr_iv = (u64)[ptr_values + 8];
	reg u128 iv; iv = (u128)[ptr_iv];
	reg u64 ptr_plain; #declassify ptr_plain = (u64)[ptr_values + 24];
	reg u64 ptrout_cipher; #declassify ptrout_cipher = (u64)[ptr_values + 40];

	reg u32 counter; counter = 2;
	iv = set_iv_counter(iv, counter);
	aes_counter(ptr_plain, ptrout_cipher, length_plain, key, iv);

	// ********  GHASH AUTHENTICATION DATA LOOP ********
	reg u64 ptr_auth_data; #declassify ptr_auth_data = (u64)[ptr_values + 16];
	reg u128 ghash; ghash = #set0_128();

	reg u128 hash_key; hash_key = compute_hash_key(key);

	hash_key = swap_bytes(hash_key);
	ghash = ghash_series(ghash, ptr_auth_data, length_auth_data, hash_key);

	// ********  GHASH CIPHER LOOP ********
	#declassify ptrout_cipher = (u64)[ptr_values + 40];
	
	reg u128 length_str; length_str = compute_length_str(length_auth_data, length_plain);
	length_str = swap_bytes(length_str);

	reg u64 ptrout_cipher2; ptrout_cipher2 = ptrout_cipher;
	reg u64 length_plain2; length_plain2 = length_plain;
	ghash = ghash_series(ghash, ptrout_cipher2, length_plain2, hash_key);
	
	
	// ********  AUTHENTICATION TAG ********
	reg u64 ptrout_auth_tag; #declassify ptrout_auth_tag = (u64)[ptr_values + 32];
	length_str = length_str;
	ghash = ghash_xor(ghash, length_str, hash_key);
	reg u32 counter; counter = 1; iv = (u128)[ptr_iv];
	iv = set_iv_counter(iv, counter);
	reg u128 enc_iv; enc_iv = compute_enciphered_iv(key, iv);
	enc_iv = swap_bytes(enc_iv);
	reg u128 auth_tag;
	auth_tag = ghash ^ enc_iv;
	auth_tag = swap_bytes(auth_tag);

	(u128)[ptrout_auth_tag] = auth_tag;
}

// ptr_args: u128 key iv, u64 ptr_auth_data ptr_cipher, u128 auth_tag, u64 ptrout_plain
// returns status: 0 if the authentication tag is correct, 1 otherwise
export fn aes_gcm_inv(#public reg u64 ptr_args, #public reg u64 length_auth_data, #public reg u64 length_cipher) -> #public reg u64 {
	reg u64 ptr_values; ptr_values = ptr_args;

	reg u64 ptr_key; #declassify ptr_key = (u64)[ptr_values];
	reg u128 key; key = (u128)[ptr_key];
	reg u64 ptr_iv; #declassify ptr_iv = (u64)[ptr_values + 8];
	reg u128 iv; iv = (u128)[ptr_iv];
	reg u64 ptr_cipher; #declassify ptr_cipher = (u64)[ptr_values + 24];
	reg u64 ptrout_plain; #declassify ptrout_plain = (u64)[ptr_values + 40];
	reg u64 ptr_auth_data; #declassify ptr_auth_data = (u64)[ptr_values + 16];
	
	// ******** AUTHENTICATION TAG CHECK ********
	// ********  GHASH AUTHENTICATION DATA LOOP ********
	reg u128 ghash; ghash = #set0_128();
	reg u128 hash_key; hash_key = compute_hash_key(key);
	hash_key = swap_bytes(hash_key);
	reg u64 length_auth_data2; length_auth_data2 = length_auth_data;
	ptr_auth_data = ptr_auth_data;
	ghash = ghash_series(ghash, ptr_auth_data, length_auth_data, hash_key);

	// ********  GHASH CIPHER LOOP ********
	reg u128 length_str; length_str = compute_length_str(length_auth_data, length_cipher);
	length_str = swap_bytes(length_str);
	reg u64 length_cipher2; length_cipher2 = length_cipher;
	ptr_cipher = ptr_cipher;
	ghash = ghash_series(ghash, ptr_cipher, length_cipher2, hash_key);

	// ********  AUTHENTICATION TAG ********
	length_str = length_str;
	ghash = ghash_xor(ghash, length_str, hash_key);
	reg u32 counter; counter = 1; iv = (u128)[ptr_iv];
	iv = set_iv_counter(iv, counter);
	reg u128 enc_iv; enc_iv = compute_enciphered_iv(key, iv);
	enc_iv = swap_bytes(enc_iv);
	reg u128 auth_tag;
	auth_tag = ghash ^ enc_iv;
	auth_tag = swap_bytes(auth_tag);

	// compare auth_tag with the one given in the arguments
	reg u64 ptr_auth_tag; #declassify ptr_auth_tag = (u64)[ptr_values + 32];
	reg u128 expected_auth_tag; expected_auth_tag = (u128)[ptr_auth_tag];

	reg u128 comp; comp = auth_tag ^ expected_auth_tag;
	reg u64 tag_success; tag_success = 0; // 0 = success, 1 = failure
	reg u64 comp64;
	comp64 = #VPEXTR_64(comp, 0);
	reg u64 FAILURE_CODE; FAILURE_CODE = 1;
	tag_success = FAILURE_CODE if comp64 != 0;
	comp64 = #VPEXTR_64(comp, 1);
	#declassify tag_success = FAILURE_CODE if comp64 != 0;

	if (tag_success == 0) {
		// ********  DECRYPT ********
		reg u32 counter; counter = 2;
		iv = set_iv_counter(iv, counter);
		#declassify ptr_cipher = (u64)[ptr_values + 24];
		aes_counter(ptr_cipher, ptrout_plain, length_cipher, key, iv);
	}


	return tag_success;
}
